results <- matrix(dat = NA, nrow = nsteps, ncol = 9)
results[1,1] <- sim1$resource_vector;
results[1,2] <- sim1$observation_vector;
results[1,3] <- sim1$manager_vector;
results[1,4] <- sim1$user_vector;
results[1,5] <- NA
results[1,6] <- NA
results[1,7] <- NA
results[1,8] <- 1
results[1,9] <- 1987   # Year
# gmse_apply loop - culling comes into effect in 2015, prior to that the user has no budget
for(time_step in 2:nsteps){
sim_new <- gmse_apply(old_list=sim1,
get_res = "full",
culling=ifelse((1986+time_step)>=2015,CUL,F),
user_budget = ifelse((1986+time_step)>=2015,5000,1))
if (class(sim_new)=="logical"){ # if extinction
results[time_step:nsteps,1] <- 0
results[time_step:nsteps,2] <- 0
results[time_step:nsteps,3] <- NA
results[time_step:nsteps,4] <- NA
results[time_step:nsteps,5] <- NA
results[time_step:nsteps,6] <- NA
results[time_step:nsteps,7] <- NA
results[time_step:nsteps,8] <- time_step:nsteps
results[time_step:nsteps,9] <- (1986+time_step):(1986+nsteps)
print("Extinction")
break
}
if (class(sim_new)=="list"){ # else
results[time_step,1] <- sim_new$resource_vector;
results[time_step,2] <- sim_new$observation_vector;
results[time_step,3] <- sim_new$manager_vector;
results[time_step,4] <- sim_new$user_vector;
results[time_step,5] <- NA
results[time_step,6] <- NA
results[time_step,7] <- NA
results[time_step,8] <- time_step
results[time_step,9] <- 1986+time_step
sim1 <- sim_new
}
print(time_step)
}
results
?install_github
library(devtools)
?install_github
install.github("GMSE", ref = "v0.3.1.9")
install_github("GMSE", ref = "v0.3.1.9")
install_github("bradduthie/GMSE", ref = "v0.3.1.9")
rm(list=ls())
library(GMSE)
# GMSE parameters
nsteps = 38
reps = 1
ld1 = 24
ld2 = 24
resm = 24
resc = 0.1
maxa = 20
agv = 12
rbK = 10000
rdK = 4200
rmo = F
oty = 0
tio = 1
minc = 10
rma = 0
SCA = F
CUL = T
CAS = F
FEE = F
nstk = 2
msens = 0.8
gamin = 200
mfreq = 1
resI = 2000     # Count in 1987
TGT = 3000      # IGMS target
KC <- 4200;
# In the run below, the manager and user both have a budget of 5000 (the user from 2015 when culling starts)
# The minimum cost is set to 10
# Initial run of gmse_apply
sim1 <- gmse_apply(land_dim_1 = ld1,             # Landscape dimension 1
land_dim_2 = ld2,             # Landscape dimension 2
res_movement = resm,          # Resource movement in one time step
res_consume = resc,           # Proportion of cell yield consumed by resource
lambda = 0.123,               # Population growth rate
max_ages = maxa,              # Maximum age of a resource
agent_view = agv,             # Number of cells that can be viewed by surveying agents
res_birth_K = rbK,            # Resource carrying capacity (acted on birth)
res_death_K = KC,             # Resource carrying capacity (acted on mortality)
res_move_obs = rmo,           # Do resources move between survey transects/blocks?
observe_type = oty,           # Type of population sampling
times_observe = tio,
user_budget = 1,           # Budget of each stakeholder on the landscape
minimum_cost = minc,          # Minimum cost of an action
manager_budget = 5000,        # Budget of the manager for implementing policy
manage_target = TGT,          # Target population size
RESOURCE_ini = resI,          # Initital population size
res_min_age = rma,            # Minimum age at which resource is counted
scaring = SCA,                # Is scaring allowed?
culling = F,                  # Is culling allowed?
castration=CAS,               # Is castration allowed?
feeding=FEE,                  # Is feeding allowed?
stakeholders = nstk,          # Number of stakeholders on the landscape
manage_freq = mfreq,          # Frequency (in time steps) with which the manager adjusts policy
manager_sense = msens,        # Sensitivity of the manager
public_land = 0,              # Proportion of the landscape that is refuge
land_ownership = F,           # Do stakeholders own land?
group_think = F,              # Stakeholders act as one
ga_mingen = gamin,
get_res = "full")
# results object
results <- matrix(dat = NA, nrow = nsteps, ncol = 9)
results[1,1] <- sim1$resource_vector;
results[1,2] <- sim1$observation_vector;
results[1,3] <- sim1$manager_vector;
results[1,4] <- sim1$user_vector;
results[1,5] <- NA
results[1,6] <- NA
results[1,7] <- NA
results[1,8] <- 1
results[1,9] <- 1987   # Year
# gmse_apply loop - culling comes into effect in 2015, prior to that the user has no budget
for(time_step in 2:nsteps){
sim_new <- gmse_apply(old_list=sim1,
get_res = "full",
culling=ifelse((1986+time_step)>=2015,CUL,F),
user_budget = ifelse((1986+time_step)>=2015,5000,1))
if (class(sim_new)=="logical"){ # if extinction
results[time_step:nsteps,1] <- 0
results[time_step:nsteps,2] <- 0
results[time_step:nsteps,3] <- NA
results[time_step:nsteps,4] <- NA
results[time_step:nsteps,5] <- NA
results[time_step:nsteps,6] <- NA
results[time_step:nsteps,7] <- NA
results[time_step:nsteps,8] <- time_step:nsteps
results[time_step:nsteps,9] <- (1986+time_step):(1986+nsteps)
print("Extinction")
break
}
if (class(sim_new)=="list"){ # else
results[time_step,1] <- sim_new$resource_vector;
results[time_step,2] <- sim_new$observation_vector;
results[time_step,3] <- sim_new$manager_vector;
results[time_step,4] <- sim_new$user_vector;
results[time_step,5] <- NA
results[time_step,6] <- NA
results[time_step,7] <- NA
results[time_step,8] <- time_step
results[time_step,9] <- 1986+time_step
sim1 <- sim_new
}
print(time_step)
}
results
sim_new$ACTION
sim_new$COST
sim_new$ACTION
29 * 172
29 * 172 / (29)
rm(list = ls())
ls()
library(GMSE)
# First initialise a simulation
sim_old  <- gmse_apply(get_res = "Full", remove_pr = 0.122, lambda = 0.275,
res_death_K = 12000, RESOURCE_ini = 3500,
manage_target = 6000, res_death_type = 3,
manager_budget = 9399, user_budget = 9399,
public_land = 0.4, stakeholders = 8, res_consume = 0.02,
res_birth_K = 200000, land_ownership = TRUE,
observe_type = 3, agent_view = 1, converge_crit = 0.0001,
ga_mingen = 200, ga_mutation = 0.3, ga_crossover = 0.3,
ga_chooseK = 5);
# Begin simulating time steps for the system
sim_sum_2 <- matrix(data = NA, nrow = 35, ncol = 5);
for(time_step in 1:35){
sim_new                 <- gmse_apply(get_res = "Full", old_list = sim_old);
sim_sum_2[time_step, 1] <- time_step;
sim_sum_2[time_step, 2] <- sim_new$basic_output$resource_results[1];
sim_sum_2[time_step, 3] <- sim_new$basic_output$observation_results[1];
sim_sum_2[time_step, 4] <- sim_new$basic_output$manager_results[3];
sim_sum_2[time_step, 5] <- sum(sim_new$basic_output$user_results[,3]);
sim_old                 <- sim_new; print(time_step);
}
colnames(sim_sum_2) <- c("Time", "Pop_size", "Pop_est", "Cull_cost",
"Cull_count");
print(sim_sum_2);
# First initialise a simulation
sim_old  <- gmse_apply(get_res = "Full", remove_pr = 0.122, lambda = 0.275,
res_death_K = 12000, RESOURCE_ini = 3500,
manage_target = 6000, res_death_type = 3,
manager_budget = 9399, user_budget = 9399,
public_land = 0.4, stakeholders = 8, res_consume = 0.02,
res_birth_K = 200000, land_ownership = TRUE,
observe_type = 3, agent_view = 1, converge_crit = 0.0001,
ga_mingen = 200, ga_mutation = 0.05, ga_crossover = 0.05,
ga_chooseK = 5);
# Begin simulating time steps for the system
sim_sum_2 <- matrix(data = NA, nrow = 35, ncol = 5);
for(time_step in 1:35){
sim_new                 <- gmse_apply(get_res = "Full", old_list = sim_old);
sim_sum_2[time_step, 1] <- time_step;
sim_sum_2[time_step, 2] <- sim_new$basic_output$resource_results[1];
sim_sum_2[time_step, 3] <- sim_new$basic_output$observation_results[1];
sim_sum_2[time_step, 4] <- sim_new$basic_output$manager_results[3];
sim_sum_2[time_step, 5] <- sum(sim_new$basic_output$user_results[,3]);
sim_old                 <- sim_new; print(time_step);
}
colnames(sim_sum_2) <- c("Time", "Pop_size", "Pop_est", "Cull_cost",
"Cull_count");
print(sim_sum_2);
# First initialise a simulation
sim_old  <- gmse_apply(get_res = "Full", remove_pr = 0.122, lambda = 0.275,
res_death_K = 12000, RESOURCE_ini = 3500,
manage_target = 6000, res_death_type = 3,
manager_budget = 1000, user_budget = 1000,
public_land = 0.4, stakeholders = 8, res_consume = 0.02,
res_birth_K = 200000, land_ownership = TRUE,
observe_type = 3, agent_view = 1, converge_crit = 0.0001,
ga_mingen = 200, ga_mutation = 0.05, ga_crossover = 0.05,
ga_chooseK = 5);
# Begin simulating time steps for the system
sim_sum_2 <- matrix(data = NA, nrow = 35, ncol = 5);
for(time_step in 1:35){
sim_new                 <- gmse_apply(get_res = "Full", old_list = sim_old);
sim_sum_2[time_step, 1] <- time_step;
sim_sum_2[time_step, 2] <- sim_new$basic_output$resource_results[1];
sim_sum_2[time_step, 3] <- sim_new$basic_output$observation_results[1];
sim_sum_2[time_step, 4] <- sim_new$basic_output$manager_results[3];
sim_sum_2[time_step, 5] <- sum(sim_new$basic_output$user_results[,3]);
sim_old                 <- sim_new; print(time_step);
}
colnames(sim_sum_2) <- c("Time", "Pop_size", "Pop_est", "Cull_cost",
"Cull_count");
print(sim_sum_2);
# First initialise a simulation
sim_old  <- gmse_apply(get_res = "Full", remove_pr = 0.122, lambda = 0.275,
res_death_K = 12000, RESOURCE_ini = 3500,
manage_target = 6000, res_death_type = 3,
manager_budget = 9399, user_budget = 9399,
public_land = 0.4, stakeholders = 8, res_consume = 0.02,
res_birth_K = 200000, land_ownership = TRUE,
observe_type = 3, agent_view = 1, converge_crit = 0.01,
ga_mingen = 200);
# Begin simulating time steps for the system
sim_sum_2 <- matrix(data = NA, nrow = 35, ncol = 5);
for(time_step in 1:35){
sim_new                 <- gmse_apply(get_res = "Full", old_list = sim_old);
sim_sum_2[time_step, 1] <- time_step;
sim_sum_2[time_step, 2] <- sim_new$basic_output$resource_results[1];
sim_sum_2[time_step, 3] <- sim_new$basic_output$observation_results[1];
sim_sum_2[time_step, 4] <- sim_new$basic_output$manager_results[3];
sim_sum_2[time_step, 5] <- sum(sim_new$basic_output$user_results[,3]);
sim_old                 <- sim_new; print(time_step);
}
colnames(sim_sum_2) <- c("Time", "Pop_size", "Pop_est", "Cull_cost",
"Cull_count");
print(sim_sum_2);
# First initialise a simulation
sim_old  <- gmse_apply(get_res = "Full", remove_pr = 0.122, lambda = 0.275,
res_death_K = 12000, RESOURCE_ini = 3500,
manage_target = 6000, res_death_type = 3,
manager_budget = 9399, user_budget = 9399,
public_land = 0.4, stakeholders = 8, res_consume = 0.02,
res_birth_K = 200000, land_ownership = TRUE,
observe_type = 3, agent_view = 1, converge_crit = 0.01,
ga_mingen = 200);
# Begin simulating time steps for the system
sim_sum_2 <- matrix(data = NA, nrow = 35, ncol = 5);
for(time_step in 1:35){
sim_new                 <- gmse_apply(get_res = "Full", old_list = sim_old);
sim_sum_2[time_step, 1] <- time_step;
sim_sum_2[time_step, 2] <- sim_new$basic_output$resource_results[1];
sim_sum_2[time_step, 3] <- sim_new$basic_output$observation_results[1];
sim_sum_2[time_step, 4] <- sim_new$basic_output$manager_results[3];
sim_sum_2[time_step, 5] <- sum(sim_new$basic_output$user_results[,3]);
sim_old                 <- sim_new; print(time_step);
}
colnames(sim_sum_2) <- c("Time", "Pop_size", "Pop_est", "Cull_cost",
"Cull_count");
print(sim_sum_2);
# First initialise a simulation
sim_old  <- gmse_apply(get_res = "Full", remove_pr = 0.122, lambda = 0.275,
res_death_K = 12000, RESOURCE_ini = 3500,
manage_target = 6000, res_death_type = 3,
manager_budget = 9399, user_budget = 9399,
public_land = 0.4, stakeholders = 8, res_consume = 0.02,
res_birth_K = 200000, land_ownership = TRUE,
observe_type = 3, agent_view = 1, converge_crit = 0.01,
ga_mingen = 200);
# Begin simulating time steps for the system
sim_sum_2 <- matrix(data = NA, nrow = 35, ncol = 5);
for(time_step in 1:35){
sim_new                 <- gmse_apply(get_res = "Full", old_list = sim_old);
sim_sum_2[time_step, 1] <- time_step;
sim_sum_2[time_step, 2] <- sim_new$basic_output$resource_results[1];
sim_sum_2[time_step, 3] <- sim_new$basic_output$observation_results[1];
sim_sum_2[time_step, 4] <- sim_new$basic_output$manager_results[3];
sim_sum_2[time_step, 5] <- sum(sim_new$basic_output$user_results[,3]);
sim_old                 <- sim_new; print(time_step);
}
colnames(sim_sum_2) <- c("Time", "Pop_size", "Pop_est", "Cull_cost",
"Cull_count");
print(sim_sum_2);
8 * 9399
8 * 9399 / 10
rm(list = ls())
library(devtools)
install_github("bradduthie/RandomMatrixStability");
library(pkgdown)
build_site();
build_site();
install.packages("rhandsontable")
library(FLCore);
install.packages(FLCore)
install.packages("FLCore", repos="http://flr-project.org/R")
library(FLCore);
newFL   <- FLSR();
data(nsher);
nsher
rec.m        <- as.matrix(rec.n);
ssb.m        <- as.matrix(ssb.n);
model(newFL) <- ricker();
newFL   <- FLSR();
data(nsher);
model(newFL) <- ricker();
newFL <- fmle(newFL);
plot(newFL, cex = 0.7);
newFL   <- FLSR();
data(nsher);
model(newFL) <- ricker();
newFL <- fmle(newFL);
newFL   <- FLSR();
data(nsher);
model(newFL) <- ricker();
plot(newFL, cex = 0.7);
FLQuant(1:10)
rec.n
library(GMSE)
rec.n
as.matrix(rec.n)
rec.n        <- c(1208.6, 10885, 4627.5, 4765.8, 6278.5, 3489.5, 2785.8)
names(rec.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965", "X1966")
rec.n
as.matrix(rec.n)
as.matrix(t(rec.n))
rec.n        <- as.matrix(t(rec.n));
ssb.n
rec.n        <- c(1208.6, 10885, 4627.5, 4765.8, 6278.5, 3489.5);
names(rec.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
rec.m        <- as.matrix(t(rec.n));
ssb.n        <- c(185.8212, 163.8547, 109.9172, 217.0503, 201.6676, 143.5557);
names(ssb.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
ssb.m        <- as.matrix(t(ssb.m));
rec.n        <- c(1208.6, 10885, 4627.5, 4765.8, 6278.5, 3489.5);
names(rec.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
rec.m        <- as.matrix(t(rec.n));
ssb.n        <- c(185.8212, 163.8547, 109.9172, 217.0503, 201.6676, 143.5557);
names(ssb.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
ssb.m        <- as.matrix(t(ssb.n));
Frec.m       <- FLQuant(rec.m, dimnames=list(age=1, year = 1960:1965));
Fssb.m       <- FLQuant(ssb.m, dimnames=list(age=1, year = 1960:1965));
Fssb.m
library(FLCore);
newFL   <- FLSR();
data(nsher);
model(newFL) <- ricker();
rec.n        <- c(1208.6, 10885, 4627.5, 4765.8, 6278.5, 3489.5);
names(rec.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
rec.m        <- as.matrix(t(rec.n));
ssb.n        <- c(185.8212, 163.8547, 109.9172, 217.0503, 201.6676, 143.5557);
names(ssb.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
ssb.m        <- as.matrix(t(ssb.n));
Frec.m       <- FLQuant(rec.m, dimnames=list(age=1, year = 1960:1965));
Fssb.m       <- FLQuant(ssb.m, dimnames=list(age=1, year = 1960:1965));
model(newFL) <- ricker();
newFL        <- fmle(newFL);
plot(newFL, cex = 0.7);
library(FLCore);
newFL   <- FLSR();
data(nsher);
rec.n        <- c(1208.6, 10885, 4627.5, 4765.8, 6278.5, 3489.5);
names(rec.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
rec.m        <- as.matrix(t(rec.n));
ssb.n        <- c(185.8212, 163.8547, 109.9172, 217.0503, 201.6676, 143.5557);
names(ssb.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
ssb.m        <- as.matrix(t(ssb.n));
Frec.m       <- FLQuant(rec.m, dimnames=list(age=1, year = 1960:1965));
Fssb.m       <- FLQuant(ssb.m, dimnames=list(age=1, year = 1960:1965));
rec(newFL)    <- Frec.m;
ssb(newFL)    <- Fssb.m;
range(newFL)  <- c(0, 1960, 0, 1965);
model(newFL) <- ricker();
newFL        <- fmle(newFL);
plot(newFL, cex = 0.7);
library(FLCore);
newFL   <- FLSR();
data(nsher);
rec.n        <- c(1208.6, 10885, 4627.5, 4765.8, 6278.5, 3489.5);
names(rec.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
rec.m        <- as.matrix(t(rec.n));
ssb.n        <- c(185.8212, 163.8547, 109.9172, 217.0503, 201.6676, 143.5557);
names(ssb.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
ssb.m        <- as.matrix(t(ssb.n));
Frec.m       <- FLQuant(rec.m, dimnames=list(age=1, year = 1960:1965));
Fssb.m       <- FLQuant(ssb.m, dimnames=list(age=1, year = 1960:1965));
rec(newFL)    <- Frec.m;
ssb(newFL)    <- Fssb.m;
range(newFL)  <- c(0, 1960, 0, 1965);
model(newFL) <- ricker();
newFL        <- fmle(newFL);
library(FLCore);
newFL   <- FLSR();
data(nsher);
rec.n        <- c(1208.6, 10885, 4627.5, 4765.8, 6278.5, 3489.5);
names(rec.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
rec.m        <- as.matrix(t(rec.n));
ssb.n        <- c(185.8212, 163.8547, 109.9172, 217.0503, 201.6676, 143.5557);
names(ssb.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
ssb.m        <- as.matrix(t(ssb.n));
Frec.m       <- FLQuant(rec.m, dimnames=list(age=1, year = 1960:1965));
Fssb.m       <- FLQuant(ssb.m, dimnames=list(age=1, year = 1960:1965));
rec(newFL)    <- Frec.m;
ssb(newFL)    <- Fssb.m;
range(newFL)  <- c(0, 1960, 0, 1965);
model(newFL) <- ricker();
newFL        <- fmle(newFL);
plot(newFL, cex = 0.7);
newFL   <- FLSR();
data(nsher);
rec.n        <- c(1208.6, 10885, 4627.5, 4765.8, 6278.5, 3489.5);
names(rec.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
rec.m        <- as.matrix(t(rec.n));
ssb.n        <- c(185.8212, 163.8547, 109.9172, 217.0503, 201.6676, 143.5557);
names(ssb.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
ssb.m        <- as.matrix(t(ssb.n));
Frec.m       <- FLQuant(rec.m, dimnames=list(age=1, year = 1960:1965));
Fssb.m       <- FLQuant(ssb.m, dimnames=list(age=1, year = 1960:1965));
rec(newFL)    <- Frec.m;
ssb(newFL)    <- Fssb.m;
range(newFL)  <- c(0, 1960, 0, 1965);
model(newFL) <- ricker();
newFL        <- fmle(newFL);
plot(newFL, scales=list(tck=c(1,0), x=list(cex=1.2), y=list(cex=1.5));
plot(newFL, scales=list(tck=c(1,0), x=list(cex=1.2), y=list(cex=1.5)));
plot(newFL, scales=list(x=list(cex=1.2), y=list(cex=1.5)));
plot(newFL, scales = list(x=list(cex = 0.8)));
plot(newFL, xlab = list(label = "Test", cex = 0.8));
plot(newFL, xlab = list(label = "Test", cex = 0.8));
plot(newFL, scales = list(x=list(cex = 0.8)));
plot(newFL, xlab = list(label = "Test", cex = 0.8));
plot(newFL);
install.packages(ggplotFL)
install.packages("ggplotFL", repos="http://flr-project.org/R")
install.packages("ggplot2")
install.packages("scales")
install.packages("gridExtra")
install.packages("ggplotFL", repos="http://flr-project.org/R")
library(FLCore);
library(ggplotFL);
newFL <- FLSR();
data(nsher);
rec.n        <- c(1208.6, 10885, 4627.5, 4765.8, 6278.5, 3489.5);
names(rec.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
rec.m        <- as.matrix(t(rec.n));
ssb.n        <- c(185.8212, 163.8547, 109.9172, 217.0503, 201.6676, 143.5557);
names(ssb.n) <- c("X1960", "X1961", "X1962", "X1963", "X1964", "X1965");
ssb.m        <- as.matrix(t(ssb.n));
Frec.m       <- FLQuant(rec.m, dimnames=list(age=1, year = 1960:1965));
Fssb.m       <- FLQuant(ssb.m, dimnames=list(age=1, year = 1960:1965));
rec(newFL)    <- Frec.m;
ssb(newFL)    <- Fssb.m;
range(newFL)  <- c(0, 1960, 0, 1965);
model(newFL) <- ricker();
newFL        <- fmle(newFL);
# This runs fine, but the axis labels are cut off, want to decrease size
plot(newFL);
warnings()
install.packages("TeachingDemos")
install.packages("png")
install.packages("ggplot2")
x <- c(1, 5, 10, 25, 50)
y <- c(35.329, 46.499, 59.454, 80.798, 82.967)
plot(x, y)
setwd("~/Dropbox/projects/StirlingCodingClub/Manuscripts_in_Rmarkdown")
dat <- read.table("data/Bumpus_data.csv")
dat
dat <- read.csv("data/Bumpus_data.csv")
dat
?t.test
t.test(x = dat[,2], y = dat[,3], alternative = "less", var.equal = TRUE)
t.test(x = dat[,2], y = dat[,3], var.equal = TRUE)
t.test(x = dat[,2], y = dat[,3], alternative = "less", var.equal = TRUE)
t.test(x = dat[,3], y = dat[,2], alternative = "less", var.equal = TRUE)
t.test(x = dat[,3], y = dat[,2])
t.test(x = dat[,2], y = dat[,3])
dat[,2]
dat[,3]
t.test(formula = dat[,3]~dat[,2], alternative = "less", var.equal = TRUE)
t.test(formula = dat[,3]~dat[,2], var.equal = TRUE)
t.test(formula = dat[,3]~dat[,2], alternative = "less", var.equal = TRUE)
t.test(formula = dat[,3]~dat[,2], alternative = "greater", var.equal = TRUE)
t.test(formula = dat[,3]~dat[,2], alternative = "less", var.equal = TRUE)
attach(dat)
head(dat)
t.test(formula = surv~totlen, alternative = "less", var.equal = TRUE)
t.test(formula = dat[,3]~dat[,2], alternative = "less", var.equal = TRUE)
dat[,3]
t.test(formula = totlen~surv, alternative = "less", var.equal = TRUE)
citation()
